@using JiayiLauncher.Appearance
@using System.IO
@using JiayiLauncher.Settings

@inject NavigationManager nav;

<div class="background-image"></div>
<div class="background-video">
    <video @key='@($"background-video-refresh-{refreshFlag}")' autoplay muted loop id="bg-video">
        <source src='@ConstructVideoURL("mp4")' type="video/mp4">
        <source src='@ConstructVideoURL("mov")' type="video/mp4">
        <source src='@ConstructVideoURL("webm")' type="video/webm">
    </video>
</div>
<script @key='@($"background-video-script-refresh-{refreshFlag}")'>
    var video = document.getElementById("bg-video");
    video.play();
    video.muted = true;
</script>
<style>
    @ThemeState.Instance?.ThemeCSS.ToString();
</style>


@code {
    private bool refreshFlag = false;

    private string ConstructVideoURL(string ext)
    {
        return $"./themes/{JiayiSettings.Instance!.Theme}/background.{ext}";
    }
    protected override async Task OnInitializedAsync()
    {
        ThemeState.Instance.OnChange += () =>
        {
            refreshFlag = !refreshFlag;
            StateHasChanged();
        };

        var themeroot = Path.Combine(ThemeState.WWWRootPath, "themes", JiayiSettings.Instance!.Theme);
        var themecss = Path.Combine(themeroot, "theme.css");
        if (!File.Exists(themecss))
        {
            JiayiSettings.Instance!.Theme = ".local/default";
            LocalTheme.CreateTheme("default");
            themeroot = Path.Combine(ThemeState.WWWRootPath, "themes", JiayiSettings.Instance!.Theme);
            themecss = Path.Combine(themeroot, "theme.css");

        }
        var theme = CssBuilder.FromFile(themecss);

        theme.UpdateProperty(":root", new CssProperty("--background-image", $"url('./themes/{JiayiSettings.Instance!.Theme}/background.gif'), url('./themes/{JiayiSettings.Instance!.Theme}/background.png'), url('./themes/{JiayiSettings.Instance!.Theme}/background.jpg')"));

        ThemeState.Instance.ApplyTheme(theme);
        await base.OnInitializedAsync();
    }
}
