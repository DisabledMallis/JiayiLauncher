@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

@using JiayiLauncher.Utils
@using System.IO
@using System.Net.Http
@using System.Reflection
@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Settings
@using JiayiLauncher.Shared.Components.Toasts
@using Microsoft.JSInterop

<BlazoredToasts Position="ToastPosition.BottomRight"
                ShowProgressBar="true"
                PauseProgressOnHover="true"
                ShowCloseButton="true"
                IconType="IconType.None" />

<Sidebar @ref="_sidebar" />

<ThemeController />

<main style="margin-left: @_margin" @onkeydown="KeyDown">
    @Body
</main>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    public static MainLayout Instance { get; private set; } = default!;

    private Sidebar? _sidebar;
    private string _margin = "5.5rem";

    private readonly Updater _updater = new();

    // silly
    private readonly List<string> _dontAskAgain = new()
    {
        "Stop asking",
        "I said no",
        "Shut up",
        "Really, no",
        "No more",
        "No means no",
        "Please stop",
        "Stop it",
        "Never again",
        "Suck my nuts"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        Instance = this;

        if (InternetManager.OfflineMode)
        {
            var parameters = new ToastParameters()
                .Add(nameof(JiayiToast.Title), "Offline Mode")
                .Add(nameof(JiayiToast.Content), new RenderFragment(builder =>
                {
                    builder.OpenElement(0, "p");
                    builder.AddContent(1, "You're offline. Some features may not work.");
                    builder.CloseElement();
                }))
                .Add(nameof(JiayiToast.Buttons), new List<(string, EventCallback)>
                                {
                    ("Okay", EventCallback.Empty)
                                });

            ToastService.ShowToast<JiayiToast>(parameters, settings => settings.DisableTimeout = true);
        }

        if (_sidebar != null) _sidebar.OnToggle += ChangeMargin;
        Arguments.Changed += (_, _) => HandleArgs(Arguments.Get());

        // handle arguments here because it's actually the best place to do it
        if (Arguments.Get() != string.Empty)
        {
            HandleArgs(Arguments.Get());
        }

        if (JiayiSettings.Instance!.EnableUpdater)
        {
            _updater.UpdateDownloaded += UpdateDownloaded;
            _updater.UpdateInstalled += UpdateInstalled;
            await UpdateCheck();
        }
    }

    public void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private void UpdateInstalled(object? sender, EventArgs e)
    {
        var version = Assembly.GetExecutingAssembly().GetName().Version ?? new Version(0, 0, 0);
        var realVersion = $"v{version.Major}.{version.Minor}.{version.Build}";

        var parameters = new ToastParameters()
            .Add(nameof(JiayiToast.Title), "Update installed")
            .Add(nameof(JiayiToast.Content), new RenderFragment(builder =>
            {
                builder.OpenElement(0, "p");
                builder.AddContent(1, $"Jiayi was updated to {realVersion}. You can view the changelog ");
                builder.OpenElement(2, "a");
                builder.AddAttribute(3, "href",
                    $"https://github.com/JiayiSoftware/JiayiLauncher/releases/tag/{realVersion}");
                builder.AddAttribute(4, "style", "color: var(--text-primary);");
                builder.AddContent(5, "on GitHub.");
                builder.CloseElement();
                builder.CloseElement();
            }))
            .Add(nameof(JiayiToast.Buttons), new List<(string, EventCallback)>
                            {
                ("Okay", EventCallback.Empty)
                            });

        ToastService.ShowToast<JiayiToast>(parameters, settings => settings.DisableTimeout = true);
    }

    private async Task UpdateCheck()
    {
        if (InternetManager.OfflineMode) return;

        var result = await _updater.IsUpdateAvailable();
        if (result)
        {
            var parameters = new ToastParameters()
                .Add(nameof(JiayiToast.Title), "Update available");

            if (JiayiSettings.Instance!.AutoDownloadUpdates)
            {
                parameters.Add(nameof(JiayiToast.Content), new RenderFragment(builder =>
                {
                    builder.OpenElement(0, "p");
                    builder.AddContent(1, "Downloading update...");
                    builder.CloseElement();
                }));

                ToastService.ShowToast<JiayiToast>(parameters, settings =>
                {
                    settings.Timeout = 5;
                    settings.ShowProgressBar = true;
                });

                await _updater.DownloadLatest();
            }
            else
            {
                parameters.Add(nameof(JiayiToast.Content), new RenderFragment(builder =>
                {
                    builder.OpenElement(0, "p");
                    builder.AddContent(1, "An update is available. Would you like to download it?");
                    builder.CloseElement();
                }))
                    .Add(nameof(JiayiToast.Buttons), new List<(string, EventCallback)>
                                    {
                        ("Yes", new EventCallback(null, async () =>
                        {
                            await _updater.DownloadLatest();
                        })),
                        ("No", EventCallback.Empty),
                        (_dontAskAgain[Random.Shared.Next(_dontAskAgain.Count - 1)], new EventCallback(null, () =>
                        {
                            JiayiSettings.Instance.EnableUpdater = false;
                            JiayiSettings.Instance.Save();
                        }))
                                    });

                ToastService.ShowToast<JiayiToast>(parameters, settings => settings.DisableTimeout = true);
            }
        }
    }

    private void UpdateDownloaded(object? sender, EventArgs e)
    {
        var parameters = new ToastParameters()
            .Add(nameof(JiayiToast.Title), "Update downloaded")
            .Add(nameof(JiayiToast.Content), new RenderFragment(builder =>
            {
                builder.OpenElement(0, "p");
                builder.AddContent(1, "Restart to install this update.");
                builder.CloseElement();
            }))
            .Add(nameof(JiayiToast.Buttons), new List<(string, EventCallback)>
                            {
                ("Restart", new EventCallback(null, () =>
                {
                    _updater.Update();
                })),
                ("Later", EventCallback.Empty)
                            });

        ToastService.ShowToast<JiayiToast>(parameters, settings => settings.DisableTimeout = true);
    }

    private void HandleArgs(string args)
    {
        if (args.StartsWith("addmod/"))
        {
            var modPath = args.Replace("addmod/", "");
            var mod = ModImporter.ImportFromPath(modPath);

            var parameters = new ModalParameters()
                .Add(nameof(EditMod.Mod), mod)
                .Add(nameof(EditMod.FromUrlProtocol), true);

            ModalService.Show<EditMod>("Edit mod", parameters);
        }

        if (File.Exists(args))
        {
            var parameters = new ModalParameters()
                .Add(nameof(ImportCollection.Path), args);

            ModalService.Show<ImportCollection>("Import collection", parameters);
        }
    }

    private void ChangeMargin(object? sender, EventArgs e)
    {
        _margin = _margin == "5.5rem" ? "13.5rem" : "5.5rem";
        StateHasChanged();
    }

    private List<string?> _konami = new() { "ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "b", "a", "Enter" };
    private string? _nextKey = "ArrowUp";

    private void KeyDown(KeyboardEventArgs obj)
    {
        if (obj.Key == _nextKey)
        {
            _konami.RemoveAt(0);
            _nextKey = _konami.FirstOrDefault();
        }
        else
        {
            _konami = new List<string?> { "ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "b", "a", "Enter" };
            _nextKey = _konami.FirstOrDefault();
        }

        if (_konami.Count == 0)
        {
            _konami = new List<string?> { "ArrowUp", "ArrowUp", "ArrowDown", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowLeft", "ArrowRight", "b", "a", "Enter" };
            _nextKey = _konami.FirstOrDefault();
            NavigationManager.NavigateTo("/Secret");
        }
    }
}