@using JiayiLauncher.Appearance
@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Pages
@using JiayiLauncher.Features.Launch
@using System.Diagnostics
@using JiayiLauncher.Features.Discord
@using JiayiLauncher.Features.Game
@using JiayiLauncher.Settings
@using JiayiLauncher.Shared.Components.Toasts
@using JiayiLauncher.Utils
@using System.Net.Http
@using System.IO
@using System.Net

@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="theme-wrapper" style='@_theme?.GetSelector(":root")?.ToStringNoSelector()'>

    <img class="theme-image" src="@Theme.Background">
    <img class="theme-image" src="./themes/@Theme.Name/background.jpg">
    <img class="theme-image" src="./themes/@Theme.Name/background.png">
    <img class="theme-image" src="./themes/@Theme.Name/background.gif">


    <video class="theme-image" autoplay muted loop>
        <source src="@Theme.Background" type="video/mp4">
        <source src="@Theme.Background" type="video/mp4">
        <source src="@Theme.Background" type="video/webm">

        <source src="./themes/@Theme.Name/background.mp4" type="video/mp4">
        <source src="./themes/@Theme.Name/background.mov" type="video/mp4">
        <source src="./themes/@Theme.Name/background.webm" type="video/webm">
    </video>

    <div class="theme-image-overlay" />
    <div class="theme-header">
        <strong style="cursor: pointer" @onclick="OpenTheme">@Theme.Name</strong>
        <p>by @Theme.Author</p>
    </div>
    <div class="theme-controls">
        <JiayiButton Size="JiayiButton.ButtonSize.Small" OnClick="() => ApplyTheme()" Disabled="@Applying">Apply</JiayiButton>
        @if (Directory.Exists(Path.Combine(ThemeState.WWWRootPath, "themes", Theme.Name)))
        {
            <span class="material-symbols-sharp" style="pointer-events: @(Applying ? "none" : "all"); z-index: 2; cursor: pointer;"
                  title="Reinstall theme" @onclick="() => InstallTheme()">download</span>
        }
    </div>
</div>

@code {
    [Parameter] public PublicTheme Theme { get; set; } = null!;

    [Parameter]
    public EventCallback<bool> ChangeApplying { get; set; }
    [Parameter]
    public bool Applying { get; set; }

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    private CssBuilder _theme;
    private bool _downloading;

    protected override async Task OnInitializedAsync()
    {
        if (Theme.Theme != null)
        {
            string response = InternetManager.Client.GetStringAsync(Theme.Theme).Result;

            if (response != null)
            {
                _theme = CssBuilder.Parse(response);
            }
            else
            {
                Log.Write("JiayiThemeCard", $"Failed to load theme: {Theme.Name}", Log.LogLevel.Error);
            }
        }

        await base.OnInitializedAsync();
    }


    private enum ThemeStatus
    {
        ApplyTheme,
        Ignore
    }
    private async Task<bool> InstallTheme()
    {
        await ChangeApplying.InvokeAsync(true);

        if (_downloading)
        {
            await ChangeApplying.InvokeAsync(false);
            return false;
        }

        var themeroot = Path.Combine(ThemeState.WWWRootPath, "themes", Theme.Name);

        if (Directory.Exists(themeroot))
        {
            var options = new List<(string, EventCallback)>();
            var parameters = new ModalParameters();

            options.Add(("Yes", new EventCallback(null, async () =>
            {
                Directory.Delete(themeroot, true);
                await DownloadTheme(themeroot);
                await ApplyTheme();
            })));
            options.Add(("No", new EventCallback(null, async () =>
            {
                await ChangeApplying.InvokeAsync(false);
            })));

            parameters
                .Add(nameof(MessageBox.Buttons), options)
                .Add(nameof(MessageBox.Message), "All of your local changes will be lost.");

            var modal = ModalService.Show<MessageBox>("Overwrite this theme?", parameters);
            if ((await modal.Result).Cancelled)
                await ChangeApplying.InvokeAsync(false);
        }
        else
        {
            await DownloadTheme(themeroot);
        }

        return true;
    }

    private async Task DownloadTheme(string themeroot)
    {
        if (_downloading)
        {
            await ChangeApplying.InvokeAsync(false);
            return;
        }

        _downloading = true;
        Directory.CreateDirectory(themeroot); // wwwroot/themes/<theme_name>

        await InternetManager.DownloadFile(Theme.Background, themeroot);
        await InternetManager.DownloadFile(Theme.Theme, themeroot);
        StateHasChanged();

        _downloading = false;
    }

    private async Task ApplyTheme()
    {
        if (Theme.Metadata == null)
        {
            Log.Write("JiayiThemeCard", $"Skipping theme application: {Theme.Name}");
            return;
        }

        await ChangeApplying.InvokeAsync(true);

        var themeroot = Path.Combine(ThemeState.WWWRootPath, "themes", Theme.Name);
        if (!File.Exists(Path.Combine(themeroot, "theme.css")) && !(await InstallTheme())) return;

        JiayiSettings.Instance!.Theme = Theme.Name;
        var theme = CssBuilder.FromFile(Path.Combine(themeroot, "theme.css"));
        theme.UpdateProperty(":root", new CssProperty("--background-image", $"url('./themes/{JiayiSettings.Instance!.Theme}/background.gif'), url('./themes/{JiayiSettings.Instance!.Theme}/background.png'), url('./themes/{JiayiSettings.Instance!.Theme}/background.jpg')"));

        ThemeState.Instance.ApplyTheme(theme);
        JiayiSettings.Instance!.Save();
        await ChangeApplying.InvokeAsync(false);
    }

    private void OpenTheme()
    {
        if (!Directory.Exists(Path.Combine(ThemeState.WWWRootPath, "themes", Theme.Name))) return;

        Process.Start(new ProcessStartInfo
            {
                FileName = "explorer.exe ",
                Arguments = $"/select, \"{Path.Combine(ThemeState.WWWRootPath, $"themes", Theme.Name, "theme.css")}\"",
                UseShellExecute = true
            });
    }
}
