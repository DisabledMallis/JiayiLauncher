@using JiayiLauncher.Appearance
@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Pages
@using JiayiLauncher.Features.Launch
@using System.Diagnostics
@using JiayiLauncher.Features.Discord
@using JiayiLauncher.Features.Game
@using JiayiLauncher.Settings
@using JiayiLauncher.Shared.Components.Toasts
@using JiayiLauncher.Utils
@using System.Net.Http
@using System.IO
@using System.Net

@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="theme-wrapper" style='@_theme?.GetSelector(":root")?.ToStringNoSelector()'>
    <img class="theme-image" src="./themes/.local/@Theme.Name/background.jpg">
    <img class="theme-image" src="./themes/.local/@Theme.Name/background.png">
    <img class="theme-image" src="./themes/.local/@Theme.Name/background.gif">


    <video class="theme-image" autoplay muted loop>
        <source src="./themes/.local/@Theme.Name/background.mp4" type="video/mp4">
        <source src="./themes/.local/@Theme.Name/background.mov" type="video/mp4">
        <source src="./themes/.local/@Theme.Name/background.webm" type="video/webm">
    </video>
    <div class="theme-image-overlay" />
    <div class="theme-header">
        <strong style="cursor: pointer" @onclick="OpenTheme">@Theme.Name</strong>
    </div>
    <div class="theme-controls">
        <JiayiButton Size="JiayiButton.ButtonSize.Small" OnClick="() => ApplyTheme()" Disabled="@Applying">Apply</JiayiButton>
        <span class="material-symbols-sharp" style="z-index: 2; cursor: pointer;"
              title="Prepare theme upload" @onclick="PrepareThemeUpload">globe</span>
    </div>
</div>

@code {
    [Parameter] public LocalTheme Theme { get; set; } = null!;

    [Parameter]
    public EventCallback<bool> ChangeApplying { get; set; }
    [Parameter]
    public bool Applying { get; set; }
    
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    private CssBuilder _theme;
    private bool _downloading;

    protected override async Task OnInitializedAsync()
    {
        var themecss = Path.Combine(ThemeState.WWWRootPath, "themes", $".local/{Theme.Name}", "theme.css");
        var css = File.ReadAllText(themecss);

        _theme = CssBuilder.Parse(css);
        await base.OnInitializedAsync();
    }


    private enum ThemeStatus
    {
        ApplyTheme,
        Ignore
    }

    private async Task ApplyTheme()
    {
        await ChangeApplying.InvokeAsync(true);

        JiayiSettings.Instance!.Theme = $".local/{Theme.Name}";

        var themeroot = Path.Combine(ThemeState.WWWRootPath, "themes", JiayiSettings.Instance!.Theme);
        if (!Directory.Exists(themeroot)) LocalTheme.CreateTheme("default");
        if (!File.Exists(Path.Combine(themeroot, "theme.css"))) LocalTheme.CreateTheme("default");

        var theme = CssBuilder.FromFile(Path.Combine(themeroot, "theme.css"));
        theme.UpdateProperty(":root", new CssProperty("--background-image", $"url('./themes/{JiayiSettings.Instance!.Theme}/background.gif'), url('./themes/{JiayiSettings.Instance!.Theme}/background.png'), url('./themes/{JiayiSettings.Instance!.Theme}/background.jpg')"));

        ThemeState.Instance.ApplyTheme(theme);
        JiayiSettings.Instance!.Save();
        await ChangeApplying.InvokeAsync(false);
    }


    private void OpenTheme()
    {
        if (!Directory.Exists(Path.Combine(ThemeState.WWWRootPath, "themes\\.local", Theme.Name))) return;

        Process.Start(new ProcessStartInfo
            {
                FileName = "explorer.exe ",
                Arguments = $"/select, \"{Path.Combine(ThemeState.WWWRootPath, $"themes", $".local\\{Theme.Name}", "theme.css")}\"",
                UseShellExecute = true
            });
    }

    private async void PrepareThemeUpload()
    {
        var parameters = new ModalParameters()
            .Add(nameof(PrepareThemePublish.ThemeName), Theme.Name);

        var modal = ModalService.Show<PrepareThemePublish>("Publish theme", parameters);
        await modal.Result;
    }
}