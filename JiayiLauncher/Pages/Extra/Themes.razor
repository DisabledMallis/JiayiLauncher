@page "/Themes"

@using JiayiLauncher.Appearance
@using JiayiLauncher.Shared.Components.Mods
@using JiayiLauncher.Shared.Components.Themes

<h3>Themes</h3>

<div class="find-tools">
    <span class="material-symbols-sharp">search</span>
    <JiayiTextBox Placeholder="Search themes" @ref="_searchBox" Changed="StateHasChanged" />

    <div class="separator"></div>

    <span class="material-symbols-sharp">filter_list</span>
    <p class="filter-by">Filter by:</p>
    @foreach (var rawTag in ThemeMetadata.RAW_TAGS)
    {
        <JiayiFilter Changed="() => FilterChanged(rawTag)">@rawTag</JiayiFilter>
    }

    <div class="separator"></div>

    <span class="material-symbols-sharp refresh" onclick="LoadThemes">refresh</span>

    <p class="invisible-normalizer">invisible</p>
</div>

<div class="themes">
    @* Local themes *@
    <ul class="theme-list">
        @if (_localThemes?.Count > 0)
        {
            foreach (var theme in _localThemes
                         .Where(theme => theme.Name.Contains(_searchBox?.Value ?? "", StringComparison.OrdinalIgnoreCase)))
            {
                <JiayiThemeCard @key="theme.Name" LocalTheme="@theme" ChangeApplying="e => _applying = e" Applying="@_applying" />
            }
        }
    </ul>

    <hr class="divider" />

    @* Public themes *@
    <ul class="theme-list">
        @if (_themes?.Length > 0)
        {
            _searchResults = 0;
            foreach (var theme in _themes)
            {
                if (_rawTags.Count > 0)
                {
                    if (!_rawTags.All(tag => theme.RawTags.Any(sourceTag => 
                            string.Equals(tag, sourceTag, StringComparison.OrdinalIgnoreCase)))) continue;
                }

                if (!theme.Name.Contains(_searchBox?.Value ?? "", StringComparison.OrdinalIgnoreCase) 
                    && theme.Tags.Count(x => x.Contains(_searchBox?.Value ?? "", StringComparison.OrdinalIgnoreCase)) == 0 
                    && !theme.Author.Contains(_searchBox?.Value ?? "", StringComparison.OrdinalIgnoreCase)) continue;

                _searchResults++;
                <JiayiThemeCard @key="theme.Name" PublicTheme="@theme" ChangeApplying="e => _applying = e" Applying="@_applying" />
            }
        }
    </ul>
    
    @if (_searchResults == 0 && _themes?.Length > 0)
    {
        <p style="text-align: center; margin-top: 0;">No results found.</p>
    }

    <button class="add-button" @onclick="CreateNewTheme">
        <span class="material-symbols-sharp">add</span>
    </button>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    
    private PublicTheme[] _themes = null!;
    private List<LocalTheme> _localThemes = null!;
    private bool _applying;
    private int _searchResults;
    private readonly List<string> _rawTags = new();
    
    // refs
    private JiayiTextBox? _searchBox;

    protected override async Task OnInitializedAsync()
    {
        LoadThemes();

        await base.OnInitializedAsync();
    }

    private void LoadThemes()
    {
        _themes = PublicTheme.GetAllThemes()!;
        _localThemes = LocalTheme.GetAllThemes().ToList();
        StateHasChanged();
    }

    private void FilterChanged(string rawTag)
    {
        if (_rawTags.Contains(rawTag))
        {
            _rawTags.Remove(rawTag);
        }
        else
        {
            _rawTags.Add(rawTag);
        }

        StateHasChanged();
    }

    private async void CreateNewTheme()
    {
        var parameters = new ModalParameters();

        var modal = ModalService.Show<NewTheme>("Create theme", parameters);
        await modal.Result;

        LoadThemes();
    }
}

