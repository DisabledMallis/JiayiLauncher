@using JiayiLauncher.Utils;
@using Microsoft.Win32
@using JiayiLauncher.Features.Mods
@using System.IO
@using System.Net
@using System.Net.Http
@using System.Net.Http.Headers;

<div class="select">
    <div class="select-file">
        <JiayiButton OnClick="SelectFile">Select a file</JiayiButton>
        <p>
            .dll and .exe files only
        </p>
    </div>

    <div class="separator">
        <div class="separator-line"></div>
        <p>or</p>
        <div class="separator-line"></div>
    </div>

    <div class="url" @onkeydown="Enter">
        <p>@_urlStatus</p>
        <JiayiTextBox Style="width: 99%" Placeholder="cool-website.com/path/to/mod.dll" @ref="_urlTextBox" />
    </div>
    
    <div class="separator">
        <div class="separator-line"></div>
        <p>or</p>
        <div class="separator-line"></div>
    </div>

    <div class="ambrosial">
        <p>Use clients from <a class="ambrosial-link" href="https://github.com/disepi/ambrosial">Ambrosial</a></p>
        <a href="/Ambrosial" class="ambrosial-select">Browse Ambrosial clients</a>
    </div>
</div>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    [CascadingParameter]
    private BlazoredModalInstance Modal { get; set; } = default!;

    private JiayiTextBox? _urlTextBox;
    private string _urlStatus = "Enter the link to your mod";

    private async Task SelectFile()
    {
        var dialog = new OpenFileDialog
            {
                Title = "Select a mod",
                Filter = "Injectable libraries (*.dll)|*.dll|" +
                             "External clients and injectors (*.exe)|*.exe",
                Multiselect = true
            };

        if (dialog.ShowDialog() == true)
        {
            if (dialog.FileNames.Length == 1)
            {
                var mod = ModImporter.ImportFromPath(dialog.FileName);

                var parameters = new ModalParameters()
                    .Add(nameof(EditMod.Mod), mod);

                ModalService.Show<EditMod>("Edit mod", parameters);
            } else if (dialog.FileNames.Length > 1)
            {
                var mods = ModImporter.ImportFromPaths(dialog.FileNames);
            }

            await Modal.CloseAsync(ModalResult.Ok());
        }
    }

    private async Task LinkSubmitted()
    {
        // wait for the text box to update
        await Task.Delay(10);

        var url = _urlTextBox?.Value;
        if (url is null or "") return;

        if (!url.StartsWith("http"))
            url = "https://" + url;

        Uri uri;

        try
        {
            uri = new Uri(url);
        }
        catch (Exception e)
        {
            Log.Write("Mod Link", e.Message, Log.LogLevel.Error);
            return;
        }


        if (ModCollection.Current != null && ModCollection.Current.HasMod(url))
        {
            _urlStatus = "This mod is already in your collection!";
            return;
        }

        try
        {
            using var client = new HttpClient();

            using var message = new HttpRequestMessage(HttpMethod.Get, url);
            using var response = await client.SendAsync(message);

            if (response.IsSuccessStatusCode)
            {
                var fileName = uri.AbsoluteUri.Split('/')[^1];

                var hasContentDisposition = !(response.Content.Headers.ContentDisposition == null || response.Content.Headers.ContentDisposition is not { FileName: not null });
                var isValidFileName = fileName?.IndexOfAny(Path.GetInvalidFileNameChars()) < 0 && (fileName.EndsWith(".exe") || fileName.EndsWith(".dll"));
                if (!hasContentDisposition && !isValidFileName)
                {
                    _urlStatus = "Invalid link";
                    return;
                }

                var name = response.Content.Headers.ContentDisposition?.FileName ?? Path.GetFileNameWithoutExtension(fileName);
                if (name == null)
                {
                    _urlStatus = "Invalid link";
                    return;
                }

                var mod = new Mod(Path.GetFileNameWithoutExtension(name), url);

                var parameters = new ModalParameters()
                    .Add(nameof(EditMod.Mod), mod);

                await Modal.CloseAsync();
                ModalService.Show<EditMod>("Edit mod", parameters);

            }
            else
            {
                _urlStatus = response.StatusCode switch
                {
                    HttpStatusCode.NotFound => "There's nothing at this address!",
                    HttpStatusCode.NoContent => "There's nothing at this address!",
                    _ => "Invalid link"
                };
            }
        }
        catch
        {
            _urlStatus = "Invalid link";
        }
    }

    private async Task Enter(KeyboardEventArgs obj)
    {
        if (obj.Key != "Enter") return;

        _urlStatus = "Checking link...";
        await LinkSubmitted();
    }

}