@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Pages
@using JiayiLauncher.Settings
@using System.IO
@using JiayiLauncher.Features.Stats
@using JiayiLauncher.Features.Versions

<div class="edit">
    <div class="edit-name">
        <p>Mod name</p>
        <JiayiTextBox Placeholder="@Mod!.Name" @ref="_nameTextBox"/>
    </div>
    
    <div class="edit-versions" style="margin-bottom: 1em">
        <p>Supported versions</p>
        <JiayiDropDown Multiselect="true" Items="_supportedVersions" Name="Select versions" SelectedItems="Mod.SupportedVersions" 
                       @ref="_versionsDropDown"/>
    </div>
    
    <div class="edit-arguments" style="margin-bottom: 1em">
        <div class="edit-arguments-dropdown" @onclick="_ => _showArguments = !_showArguments">
            <i>Launch arguments</i>
            <span class="material-symbols-sharp">
                @(_showArguments ? "expand_less" : "expand_more")
            </span>
        </div>
        @if (_showArguments)
        {
            <JiayiTextBox Placeholder="This does not apply to internal mods" Style="margin-top: 1em; width: 100%" 
                          @ref="_argumentsTextBox"/>
        }
    </div>
    
    <JiayiButton Size="JiayiButton.ButtonSize.Small" OnClick="SaveClicked" Style="margin-bottom: 1em;">Save</JiayiButton>
    
    @if (JiayiSettings.Instance!.ModCollectionPath == string.Empty)
    {
        <br>
        <i>
            Mods will be saved to their default location, which you can change in settings
        </i>
    }
    
    @if (FromUrlProtocol)
    {
        <br>
        <i style="color: darkred;">
            This mod came from an external app or website. Don't add mods from untrusted sources.
        </i>
    }
</div>

@code {
    private readonly List<string> _supportedVersions = new() { "Any version" };
    
    [Parameter]
    public Mod? Mod { get; set; }
    
    [Parameter]
    public bool FromUrlProtocol { get; set; }
    
    [CascadingParameter]
    private BlazoredModalInstance Modal { get; set; } = default!;
    
    private JiayiTextBox? _nameTextBox;
    private JiayiDropDown? _versionsDropDown;
    private JiayiTextBox? _argumentsTextBox;
    
    private bool _showArguments = false;

    protected override async Task OnInitializedAsync()
    {
        _supportedVersions.AddRange(await VersionList.GetVersionList());
    }

    private async Task SaveClicked()
    {
        if (Mod == null) return;
        
        if (_versionsDropDown!.SelectedItems.Contains("Any version") && _versionsDropDown.SelectedItems.Count > 1)
        {
            _versionsDropDown.SelectedItems.Clear();
            return;
        }
        
        if (_versionsDropDown.SelectedItems.Count == 0)
        {
            _versionsDropDown.SelectedItems.Add("Any version");
        }

        Mod.Name = _nameTextBox?.Value ?? Mod.Name;
        Mod.SupportedVersions = _versionsDropDown?.SelectedItems ?? Mod.SupportedVersions;
        Mod.Arguments = _argumentsTextBox?.Value ?? Mod.Arguments;
        
        if (JiayiSettings.Instance!.ModCollectionPath == string.Empty)
        {
            JiayiSettings.Instance.ModCollectionPath = 
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "JiayiLauncher", "Mods");
            JiayiSettings.Instance.Save();
            ModCollection.Load(JiayiSettings.Instance.ModCollectionPath);
        }

        // basically skips confirmation if mod is already in collection
        ModCollection.Current!.Add(Mod, !ModCollection.Current.HasMod(Mod.Path));
        
        await Modal.CloseAsync(ModalResult.Ok(Mod));
        
        // update mods page and stats
        Mods.Instance?.Refresh();
        JiayiStats.Save();
    }
}
